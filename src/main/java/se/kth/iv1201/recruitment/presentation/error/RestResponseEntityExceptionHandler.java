package se.kth.iv1201.recruitment.presentation.error;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
import se.kth.iv1201.recruitment.presentation.EmailNotUniqueException;
import se.kth.iv1201.recruitment.presentation.Response;
import se.kth.iv1201.recruitment.presentation.UsernameNotUniqueException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@ControllerAdvice
public class RestResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {

    @ExceptionHandler(value = {Exception.class})
    public ResponseEntity<Object> handleConflict(Exception ex, WebRequest request) {
        Response bodyOfResponse = new Response(false, "There was a problem creating the account.");
        // TODO better response code?
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.CONFLICT, request);
    }

    @ExceptionHandler(value = {UsernameNotUniqueException.class})
    public ResponseEntity<Object> handleConflict(UsernameNotUniqueException ex, WebRequest request) {
        Response bodyOfResponse = new Response(false, "The username is already in use.");
        // TODO better response code?
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.CONFLICT, request);
    }

    @ExceptionHandler(value = {EmailNotUniqueException.class})
    public ResponseEntity<Object> handleConflict(EmailNotUniqueException ex, WebRequest request) {
        Response bodyOfResponse = new Response(false, "An account associated to that email address already exists.");
        // TODO better response code?
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.CONFLICT, request);
    }

    @GetMapping("/error")
    public ResponseEntity<Object> handleHttpError(HttpServletRequest request, HttpServletResponse response) {
        // TODO implement functionality ro resolve http errors generated by user
        return null;
    }
}
