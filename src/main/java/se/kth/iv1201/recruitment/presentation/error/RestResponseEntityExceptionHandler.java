package se.kth.iv1201.recruitment.presentation.error;

import org.springframework.boot.web.servlet.error.ErrorController;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
import se.kth.iv1201.recruitment.domain.EmailNotUniqueException;
import se.kth.iv1201.recruitment.domain.UsernameNotUniqueException;
import se.kth.iv1201.recruitment.presentation.Response;

/**
 * Handles exceptions thrown by the application, as well as incoming HTTP request target towards unknown resources.
 */
@Controller
@ControllerAdvice
public class RestResponseEntityExceptionHandler extends ResponseEntityExceptionHandler implements ErrorController {

    /**
     * The generic exception handler when there is no more specified handler for the thrown exception.
     *
     * @return A HTTP response with relevant status and response body.
     */
    @ExceptionHandler(value = {Exception.class})
    public ResponseEntity<Object> handleConflict(Exception ex, WebRequest request) {
        Response bodyOfResponse = new Response(false, "There was a problem creating the account.");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.CONFLICT, request);
    }

    /**
     * The exception handler that resolves the broken business rule of username uniqueness.
     *
     * @return A HTTP response with relevant status and response body.
     */
    @ExceptionHandler(value = {UsernameNotUniqueException.class})
    public ResponseEntity<Object> handleConflict(UsernameNotUniqueException ex, WebRequest request) {
        Response bodyOfResponse = new Response(false, "That username is already in use.");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.CONFLICT, request);
    }

    /**
     * The exception handler that resolves the broken business rule of email uniqueness.
     *
     * @return A HTTP response with relevant status and response body.
     */
    @ExceptionHandler(value = {EmailNotUniqueException.class})
    public ResponseEntity<Object> handleConflict(EmailNotUniqueException ex, WebRequest request) {
        Response bodyOfResponse = new Response(false, "An account associated to that email address already exists.");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.CONFLICT, request);
    }

    /**
     * A generic handler to catch HTTP errors generated by the user.
     *
     * @return A HTTP 400 Bad Request response.
     */
    @RequestMapping("/error")
    public ResponseEntity<Object> handleHttpError() {
        return new ResponseEntity<>(new Response(false, "The request couldn't be processed."), HttpStatus.BAD_REQUEST);
    }

    @Override
    public String getErrorPath() {
        return "/error";
    }
}
